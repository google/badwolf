{
  "Name": "Family graph clauses traversal",
  "Sources": [
    {
      "ID": "?g",
      "Facts": [
        "/u<joe> \"parent_of\"@[] /u<mary>",
        "/u<joe> \"parent_of\"@[] /u<peter>",
        "/u<peter> \"parent_of\"@[] /u<john>",
        "/u<peter> \"parent_of\"@[] /u<eve>"
      ]
    }
  ],
  "Assertions": [
    {
      "Requires": "Joe to have two grandchildren",
      "Statement": "
      SELECT ?name
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc ID ?name
      }
      ORDER BY ?name ASC;",
      "WillFail": false,
      "MustReturn": [
        {
          "?name": "eve"
        },
        {
          "?name": "john"
        }
      ]
    },
    {
      "Requires": "Joe has two children despite redundant clause",
      "Statement": "
      SELECT ?repeated_name
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c ID ?repeated_name .
        /u<joe> \"parent_of\"@[] ?c ID ?repeated_name
      }
      ORDER BY ?repeated_name ASC;",
      "WillFail": false,
      "MustReturn": [
        {
          "?repeated_name": "mary"
        },
        {
          "?repeated_name": "peter"
        }
      ]
    },
    {
      "Requires": "four possible combinations of Joe's children",
      "Statement": "
      SELECT ?name_1, ?name_2
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c1 ID ?name_1 .
        /u<joe> \"parent_of\"@[] ?c2 ID ?name_2
      }
      ORDER BY ?name_1 ASC, ?name_2 ASC;",
      "WillFail": false,
      "MustReturn": [
        {
          "?name_1": "mary",
          "?name_2": "mary"
        },
        {
          "?name_1": "mary",
          "?name_2": "peter"
        },
        {
          "?name_1": "peter",
          "?name_2": "mary"
        },
        {
          "?name_1": "peter",
          "?name_2": "peter"
        }
      ]
    },
    {
      "Requires": "Joe's grandchildren should product four combinations",
      "Statement": "
      SELECT ?name_1, ?name_2
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc1 ID ?name_1 .
        ?c \"parent_of\"@[] ?gc2 ID ?name_2
      }
      ORDER BY ?name_1 ASC, ?name_2 ASC;",
      "WillFail": false,
      "MustReturn": [
        {
          "?name_1": "eve",
          "?name_2": "eve"
        },
        {
          "?name_1": "eve",
          "?name_2": "john"
        },
        {
          "?name_1": "john",
          "?name_2": "eve"
        },
        {
          "?name_1": "john",
          "?name_2": "john"
        }
      ]
    },
    {
      "Requires": "returning the first Joe's grandchildren of the possible combinations",
      "Statement": "
      SELECT ?name_1, ?name_2
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc ID ?name_1 .
        ?c \"parent_of\"@[] ?gc ID ?name_2
      }
      ORDER BY ?name_1 ASC, ?name_2 ASC
      LIMIT \"1\"^^type:int64;",
      "WillFail": false,
      "MustReturn": [
        {
          "?name_1": "eve",
          "?name_2": "eve"
        }
      ]
    },
    {
      "Requires": "Joe's grandchildren combinations to be returned only if both have the same name",
      "Statement": "
      SELECT ?name_1, ?name_2
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc ID ?name_1 .
        ?c \"parent_of\"@[] ?gc ID ?name_2
      }
      ORDER BY ?name_1 ASC, ?name_2 ASC
      HAVING ?name_1 = ?name_2;",
      "WillFail": false,
      "MustReturn": [
        {
          "?name_1": "eve",
          "?name_2": "eve"
        },
        {
          "?name_1": "john",
          "?name_2": "john"
        }
      ]
    },
    {
      "Requires": "Joe's grandchildren combinations to be returned only if both do not have the same name",
      "Statement": "
      SELECT ?name_1, ?name_2
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc1 ID ?name_1 .
        ?c \"parent_of\"@[] ?gc2 ID ?name_2
      }
      ORDER BY ?name_1 ASC, ?name_2 ASC
      HAVING NOT(?name_1 = ?name_2);",
      "WillFail": false,
      "MustReturn": [
        {
          "?name_1": "eve",
          "?name_2": "john"
        },
        {
          "?name_1": "john",
          "?name_2": "eve"
        }
      ]
    },
    {
      "Requires": "Joe's grandchildren combinations to be returned only if the first name is less than the second one",
      "Statement": "
      SELECT ?name_1, ?name_2
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc1 ID ?name_1 .
        ?c \"parent_of\"@[] ?gc2 ID ?name_2
      }
      ORDER BY ?name_1 ASC, ?name_2 ASC
      HAVING ?name_1 < ?name_2;",
      "WillFail": false,
      "MustReturn": [
        {
          "?name_1": "eve",
          "?name_2": "john"
        }
      ]
    },
    {
      "Requires": "listing all the possible four combination of Joe's children and grandchildren",
      "Statement": "
      SELECT ?name_children, ?name_grandchildren
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc ID ?name_grandchildren .

        /u<joe> \"parent_of\"@[] ?oc ID ?name_children
      }
      ORDER BY ?name_children ASC, ?name_grandchildren ASC;",
      "WillFail": false,
      "MustReturn": [
        {
          "?name_children": "mary",
          "?name_grandchildren": "eve"
        },
        {
          "?name_children": "mary",
          "?name_grandchildren": "john"
        },
        {
          "?name_children": "peter",
          "?name_grandchildren": "eve"
        },
        {
          "?name_children": "peter",
          "?name_grandchildren": "john"
        }
      ]
    },
    {
      "Requires": "listing all the possible four combination of Joe's children and grandchildren only if the children has kids",
      "Statement": "
      SELECT ?name_children, ?name_grandchildren
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c ID ?name_children .
        ?c \"parent_of\"@[] ?gc ID ?name_grandchildren
      }
      ORDER BY ?name_children ASC, ?name_grandchildren ASC;",
      "WillFail": false,
      "MustReturn": [
        {
          "?name_children": "peter",
          "?name_grandchildren": "eve"
        },
        {
          "?name_children": "peter",
          "?name_grandchildren": "john"
        }
      ]
    },
    {
      "Requires": "listing Joe as the only grandparent",
      "Statement": "
      SELECT ?grandparent
      FROM ?g
      WHERE {
        ?gp ID ?grandparent \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc ID ?gc
      }
      GROUP BY ?grandparent;",
      "WillFail": false,
      "MustReturn": [
        {
          "?grandparent": "joe"
        }
      ]
    },
    {
      "Requires": "counting XX two as the number of grand children Joe has",
      "Statement": "
      SELECT ?grandparent, COUNT(?gc) AS ?number_of_grandchildren
      FROM ?g
      WHERE {
        ?gp ID ?grandparent \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc ID ?gc
      }
      GROUP BY ?grandparent;",
      "WillFail": false,
      "MustReturn": [
        {
          "?grandparent": "joe",
          "?number_of_grandchildren": "\"2\"^^type:int64"
        }
      ]
    },
    {
      "Requires": "Joe has two kids and one is Mary for sure",
      "Statement": "
      SELECT ?mary_name
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] /u<mary> .
        /u<joe> \"parent_of\"@[] ?c ID ?mary_name
      }
      ORDER BY ?mary_name ASC;",
      "WillFail": false,
      "MustReturn": [
        {
          "?mary_name": "mary"
        },
        {
          "?mary_name": "peter"
        }
      ]
    },
    {
      "Requires": "no Joe's children gets returned if he does not have one called Zoe",
      "Statement": "
      SELECT ?impossible_name
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] /u<zoe> .
        /u<joe> \"parent_of\"@[] ?c ID ?impossible_name
      }
      ORDER BY ?impossible_name ASC;",
      "WillFail": false,
      "MustReturn": [
      ]
    },
    {
      "Requires": "Joe has at least two children and their names are Eve and John",
      "Statement": "
      SELECT ?name
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc ID ?name .
        ?parent \"parent_of\"@[] /u<eve> .
        ?other_parent \"parent_of\"@[] /u<john>
      }
      ORDER BY ?name ASC;",
      "WillFail": false,
      "MustReturn": [
        {
          "?name": "eve"
        },
        {
          "?name": "john"
        }
      ]
    },
    {
      "Requires": "Joe has at least two children and their names are Eve and John and both share the same parent",
      "Statement": "
      SELECT ?name
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc ID ?name .
        ?parent \"parent_of\"@[] /u<eve> .
        ?other_parent \"parent_of\"@[] /u<john>
      }
      ORDER BY ?name ASC
      HAVING ?parent = ?other_parent;",
      "WillFail": false,
      "MustReturn": [
        {
          "?name": "eve"
        },
        {
          "?name": "john"
        }
      ]
    },
    {
      "Requires": "Joe has at least two children and their names are Eve and John and both are children of Peter",
      "Statement": "
      SELECT ?name
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc ID ?name .
        /u<peter> \"parent_of\"@[] /u<eve> .
        /u<peter> \"parent_of\"@[] /u<john>
      }
      ORDER BY ?name ASC;",
      "WillFail": false,
      "MustReturn": [
        {
          "?name": "eve"
        },
        {
          "?name": "john"
        }
      ]
    },
    {
      "Requires": "Joe has no two children and bot are children of Mary",
      "Statement": "
      SELECT ?name
      FROM ?g
      WHERE {
        /u<joe> \"parent_of\"@[] ?c .
        ?c \"parent_of\"@[] ?gc ID ?name .
        /u<mary> \"parent_of\"@[] ?name
      }
      ORDER BY ?name ASC;",
      "WillFail": false,
      "MustReturn": [
      ]
    }
  ]
}
